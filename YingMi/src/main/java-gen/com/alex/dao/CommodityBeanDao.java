package com.alex.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alex.bean.CommodityBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMMODITY_BEAN.
*/
public class CommodityBeanDao extends AbstractDao<CommodityBean, Long> {

    public static final String TABLENAME = "COMMODITY_BEAN";

    /**
     * Properties of entity CommodityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountID = new Property(1, String.class, "accountID", false, "ACCOUNT_ID");
        public final static Property ActorId = new Property(2, String.class, "actorId", false, "ACTOR_ID");
        public final static Property BigImagePath = new Property(3, String.class, "bigImagePath", false, "BIG_IMAGE_PATH");
        public final static Property CommodityDesc = new Property(4, String.class, "commodityDesc", false, "COMMODITY_DESC");
        public final static Property CommodityId = new Property(5, String.class, "commodityId", false, "COMMODITY_ID");
        public final static Property CommodityImagePath = new Property(6, String.class, "commodityImagePath", false, "COMMODITY_IMAGE_PATH");
        public final static Property CommodityName = new Property(7, String.class, "commodityName", false, "COMMODITY_NAME");
        public final static Property Currency = new Property(8, String.class, "currency", false, "CURRENCY");
        public final static Property LinkPath = new Property(9, String.class, "linkPath", false, "LINK_PATH");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(11, String.class, "nickName", false, "NICK_NAME");
        public final static Property Price = new Property(12, String.class, "price", false, "PRICE");
        public final static Property ProductionId = new Property(13, String.class, "productionId", false, "PRODUCTION_ID");
        public final static Property ThemeId = new Property(14, Integer.class, "themeId", false, "THEME_ID");
    };


    public CommodityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMMODITY_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_ID' TEXT," + // 1: accountID
                "'ACTOR_ID' TEXT," + // 2: actorId
                "'BIG_IMAGE_PATH' TEXT," + // 3: bigImagePath
                "'COMMODITY_DESC' TEXT," + // 4: commodityDesc
                "'COMMODITY_ID' TEXT," + // 5: commodityId
                "'COMMODITY_IMAGE_PATH' TEXT," + // 6: commodityImagePath
                "'COMMODITY_NAME' TEXT," + // 7: commodityName
                "'CURRENCY' TEXT," + // 8: currency
                "'LINK_PATH' TEXT," + // 9: linkPath
                "'NAME' TEXT," + // 10: name
                "'NICK_NAME' TEXT," + // 11: nickName
                "'PRICE' TEXT," + // 12: price
                "'PRODUCTION_ID' TEXT," + // 13: productionId
                "'THEME_ID' INTEGER);"); // 14: themeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMMODITY_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommodityBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String accountID = entity.getAccountID();
        if (accountID != null) {
            stmt.bindString(2, accountID);
        }
 
        String actorId = entity.getActorId();
        if (actorId != null) {
            stmt.bindString(3, actorId);
        }
 
        String bigImagePath = entity.getBigImagePath();
        if (bigImagePath != null) {
            stmt.bindString(4, bigImagePath);
        }
 
        String commodityDesc = entity.getCommodityDesc();
        if (commodityDesc != null) {
            stmt.bindString(5, commodityDesc);
        }
 
        String commodityId = entity.getCommodityId();
        if (commodityId != null) {
            stmt.bindString(6, commodityId);
        }
 
        String commodityImagePath = entity.getCommodityImagePath();
        if (commodityImagePath != null) {
            stmt.bindString(7, commodityImagePath);
        }
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(8, commodityName);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(9, currency);
        }
 
        String linkPath = entity.getLinkPath();
        if (linkPath != null) {
            stmt.bindString(10, linkPath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(12, nickName);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(13, price);
        }
 
        String productionId = entity.getProductionId();
        if (productionId != null) {
            stmt.bindString(14, productionId);
        }
 
        Integer themeId = entity.getThemeId();
        if (themeId != null) {
            stmt.bindLong(15, themeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommodityBean readEntity(Cursor cursor, int offset) {
        CommodityBean entity = new CommodityBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actorId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bigImagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commodityDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // commodityId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commodityImagePath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // commodityName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // currency
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // linkPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nickName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // price
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // productionId
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // themeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommodityBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActorId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBigImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommodityDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommodityId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommodityImagePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommodityName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrency(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLinkPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNickName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProductionId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setThemeId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommodityBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommodityBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
